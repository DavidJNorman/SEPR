You should be able to receive a quest from a location or NPC by interacting with a NPC or notification.

The Quest should have a title
The Quest should have an ID - so they cant take the same quest twice at the same time.
The Quest should have a gold reward
The Quest should have a point reward
The Quest should have a description so users know what to do
The Quest should have a location to turn it in
The Quest should have a location to tell the user where to go to do it
The Quest should have a tally to tell them how far they've progressed
The Quest should have a variable to tell you if it's repeatable


There should be a list of completed quests by ID
There should be a list of active quests by ID		- Quests they currently have active
There should be a list of inactive quests by ID 	- Quests they haven't taken

There should be dependencies for some quests, so some can only be accepted if others are completed(This works as it's own game state) - New File of it's own.

Quest should be accepted by:
If by talking to an NPC, we can have it go through dialogue and then if the user doesn't have the quest in active set the ID to active (by using a game state by quest ID's we can check easier, if it depends on previous quests or not)






QUEST STATE CONTROLLER:

>Start game
>Quests loaded from a text file into the unbegunQuests variable aside from the starting Quest ID 001 which goes to activeQuests.

>Load to the HUD,
find a way to load active quests into the HUD

>In Battle mode, 
we need a way to get the enemy Target's ID
we need a way to compare it to all activeQuests values(objects), and their variables (TargetID)
we then need to use incCurrentAmount() for all Objects with the TargetID matched to the target that are in activeQuests
-The currentAmount for the quest should never exceed the Target amount
>>Battle End do CheckActiveQuests():
	for(key: ActiveQuests.keySet()):
		When ActiveQuests.get(key).isComplete() == true:
			CompleteQuest.put(key, ActiveQuests.get(key));


>In Sailing mode,
we need a way for the user to accept non storyline quests, and more than once IF the quest's isRepeatable variable is true, but only one at a time.
we need a way for the user to turn in Storyline quests and IMMEDIATELY be presented with a new quest
we need it set up so the user cant accept quests if the dependencies are ALL not within isComplete





More info:
Do we have the quests in a file which pre-loads when it starts up loading all quests? Yes because the quest state controller needs to be able to see if a quest is active or inactive
-So just have a file that initialises like... all the quests? Yeah sure that works tbh.


!!!!!!!
For different types of quests, if we wanna do fetch quests, lets say, missions with difference necessities, we could use subclasses of the overall quest
E.G. Kill quests use a number system, like 5/8 kills, but another system E.G. guarding, would just access the target's health and compare it to zero, maybe have a live updater.
This isn't necessary, but it's useful if we need a different framework for each type of quest.

Changed Dependencies to be mainDependency - Due to the basic and linear setup of the game, the story missions follow a linear pathing and all optional missions rely on story missions, therefore you only need one main dependency - this saves coding time and complexity


We have code to check for all quests if any are complete, if so it could save the keys to an array list, then if any quests in unbegun quests 